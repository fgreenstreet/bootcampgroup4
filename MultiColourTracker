#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Sep 20 13:48:17 2017

@author: fmjgreenstreet
"""

# import the necessary packages
from collections import deque
import numpy as np
import cv2
import math
import imutils 


def colourObjFindr(colourLower, colourUpper, multiobj):
    mask = cv2.inRange(hsv, colourLower, colourUpper)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    

	# find contours in the mask and initialize the current
	# (x, y) center of the ball
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
		cv2.CHAIN_APPROX_SIMPLE)[-2]
    centers = []

	# only proceed if at least one contour was found
    if len(cnts) > 0:
		# find the largest contour in the mask, then use
		# it to compute the minimum enclosing circle and
		# centroid
        print ('found an object')
        #c = max(cnts, key=cv2.contourArea)
        if multiobj == 1:
            for c in range(0, len(cnts)):
                ((x, y), radius) = cv2.minEnclosingCircle(cnts[c])
                M = cv2.moments(cnts[c])
                centers.append([int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"])])
        
                if radius > 1:
                    cv2.circle(frame, (int(x), int(y)), int(radius),
				     (0, 255, 255), 2)
                    cv2.circle(frame, tuple(centers[c]), 2, (255, 255, 255), -1)
        elif multiobj == 0:
            c = max(cnts, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            M = cv2.moments(c)
            centers = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
            
            if radius > 1:
                cv2.circle(frame, (int(x), int(y)), int(radius),
				     (0, 255, 255), 2)
                cv2.circle(frame, tuple(centers[c]), 2, (255, 255, 255), -1)
            
            
    return centers


def distanceFinder(midpoint, centers):
    distances = []
    for a in range (0, len(centers)):
        center = centers[a]
        distancex = midpoint[0]-center[0]
        distancey = midpoint[1]-center[1]
        distance = math.sqrt(distancex**2 + distancey**2)
        distances.append(distance)
    
# define the lower and upper boundaries of the "red"
# ball in the HSV color space, then initialize the
# list of tracked points
greenLower = (29, 10, 10)
greenUpper = (64, 255, 255)
redLower = (18,63,0)
redUpper = (44,169,255)
blueLower = (91, 70, 49)
blueUpper = (136, 255, 255)
whiteLower = (0, 0, 250)
whiteUpper = (255, 255, 255)

camera = cv2.VideoCapture(1)


# keep looping
while True:
    # grab the current frame
    (grabbed, frame) = camera.read()
    frame = imutils.resize(frame, width=600)

    # blur it, and convert it to the HSV
	# color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    Rcenter = colourObjFindr(redLower, redUpper,0)
    Gcenter = colourObjFindr(greenLower, greenUpper, 0)
    
    Bcenter = colourObjFindr(blueLower, blueUpper, 1)
    Wcenter = colourObjFindr(whiteLower, whiteUpper, 1)
    
    midx = (Rcenter[0]+Gcenter[0])/2.
    midy = (Rcenter[1]+Gcenter[1])/2.
    midpoint = tuple([midx,midy])
    
    BlueDist = distanceFinder(midpoint, Bcenter)
    WhiteDist = distanceFinder(midpoint, Wcenter)
            
	# show the frame to our screen
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF

	# if the 'q' key is pressed, stop the loop
    if key == ord("q"):
        break
        cv2.destroyAllWindows()

# cleanup the camera and close any open windows
camera.release()
cv2.destroyAllWindows()
